Install Node.js
	https://nodejs.org/en
	Download Node.js (LTS)
	Node.js installation automatically install npm
	Open Command Prompt
		node -v
		npm -v
	
Install Angular CLI
	Command Line Interface used to create angular applications.
	Open Command Prompt
		npm install -g @angular/cli
		ng --version
		
Install VS Code
	https://code.visualstudio.com/download
	
Create new Folder d:/John/AngularProjects

Open vscode from Command Prompt
	navigate to that folder in command prompt
	code .
	
Create new Angular App from vscode.
	Open Terminal
	ng new book-ui
	suppose any error 
		Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted
	for zoneless - N
	select css
	N for SSR (Server Side Rendering)

Run first Angular App
	Open Terminal
	cd book-ui
	ng serve
	Open Browser
	http://localhost:4200



Add Bootstrap in our anglar app.
	Bootstrap is css frame work used to develop responsive layouts in web applications.
	Open New Terminal
	go to your app folder
	npm install bootstrap --save
	https://getbootstrap.com/
		Include via CDN
		copy the link tag
	Open index.html
		paste it inside head tag.

Test bootstrap successfully integrated
	open app.html -> Delete all -> Copy and paste below line
		<h1 class="text-center">{{title}}</h1>
	open browser and check the title is centered.

	Open app.ts 
		import { Component, signal } from '@angular/core';
		import { RouterOutlet } from '@angular/router';

		@Component({
		  selector: 'app-root',
		  imports: [RouterOutlet],
		  templateUrl: './app.html',
		  styleUrl: './app.css'
		})
		export class App {
		  protected readonly title = 'book-ui';
		}


go to your app folder (book-ui)

ng g c books-read 
ng g c book-create
ng g c book-update
ng g c book-read
ng g c book-home
ng g s book-service 
ng g class book

book.ts
	export class Book {
		bno!: number;
		title!: string;
		author!: string;
		price!: number;
	}

styles.css
.footer{
    position: absolute;
    bottom:0;
    width:100%;
    height:40px;
    background-color: blue;
    text-align: center;
    color:white;
}

app.routes.ts

import { Routes } from '@angular/router';
import { BookCreate } from './book-create/book-create';
import { BooksRead } from './books-read/books-read';
import { BookUpdate } from './book-update/book-update';
import { BookRead } from './book-read/book-read';
import { BookHome } from './book-home/book-home';
export const routes: Routes = [
    {path:'books-read',component:BooksRead},
    {path:'book-create',component:BookCreate},
    {path:'book-update',component:BookUpdate},
    {path:'book-read',component:BookRead},
    {path:'',component:BookHome}
];

app.config.ts

import { ApplicationConfig, provideBrowserGlobalErrorListeners, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideHttpClient } from '@angular/common/http';

export const appConfig: ApplicationConfig = {
  providers: [
    provideBrowserGlobalErrorListeners(),
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes),provideHttpClient()
  ]
};

app.ts 

import { Component, signal } from '@angular/core';
import { RouterLink,RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet,RouterLink],
  templateUrl: './app.html',
  styleUrl: './app.css'
})
export class App {
  protected readonly title = 'book-ui';
}

app.html

<nav class="navbar navbar-expand-sm bg-primary navbar-dark">
  <ul class="navbar-nav">
    <li class="nav-item">
      <a routerLink="" routerLinkActive="active" class="nav-link">Home</a>
    </li>
    <li class="nav-item">
      <a routerLink="books-read" routerLinkActive="active" class="nav-link">Read Books</a>
    </li>
    <li class="nav-item">
      <a routerLink="book-create" routerLinkActive="active" class="nav-link">Create Book</a>
    </li>
  </ul>
</nav>
<div class = "container">
<router-outlet></router-outlet>
</div>
<footer class = "footer">
  <div class="container">
    <span>All Rights Reserved 2025 John Philip</span>
  </div>
</footer>



book-service.ts

import { HttpClient, HttpParams } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { Book } from './book';

@Injectable({
  providedIn: 'root'
})
export class BookService {
  private baseURL = "http://localhost:8080/book/db/api/";
constructor(private httpClient:HttpClient) { }
  
  readBooks(): Observable<Book[]>{
    return this.httpClient.get<Book[]>(this.baseURL+"readbooks");
  }
  
  createBook(book: Book): Observable<Object>{
    return this.httpClient.post(this.baseURL + "createbook", book,{responseType:'text'});
  }

  readBook(bno: number): Observable<Book>{
    let queryParams = new HttpParams();
    queryParams = queryParams.set('bno',bno);
    return this.httpClient.get<Book>(this.baseURL + "getbookbybno",{params:queryParams});
  }

  updateBook(bno: number, book: Book): Observable<Object>{
  const params = {
        bno: bno
      };
    return this.httpClient.put(this.baseURL + "updatebook", book , {responseType:'text', params});
  }
  deleteBook(bno: number): Observable<Object>{
    const params = {
        bno: bno
      };
    return this.httpClient.delete(this.baseURL + "deletebook", {responseType:'text', params});
  }
}


books-read.ts 

import { Component, OnInit } from '@angular/core';
import { Book } from '../book';
import { BookService } from '../book-service';
import { Router } from '@angular/router';
import { CommonModule } from '@angular/common';

@Component({
  selector: 'app-books-read',
  imports: [CommonModule],
  templateUrl: './books-read.html',
  styleUrl: './books-read.css'
})
export class BooksRead implements OnInit {
  books!: Book[];
  constructor(private bookService: BookService,
    private router: Router) { }
  ngOnInit(): void {
    this.readBooks();
  }
  private readBooks(){
    this.bookService.readBooks().subscribe(data => {
      this.books = data;
    });
  }
  readBook(bno: number){
    this.router.navigate(['book-read'], {queryParams: { 'bno': bno } });
  }
  updateBook(bno: number){
    this.router.navigate(['book-update'], {queryParams: { 'bno': bno } });
  }
  deleteBook(bno: number){
    this.bookService.deleteBook(bno).subscribe( data => {
      this.readBooks();
    })
  }
}

books-read.html

<h2> Book List</h2>
<table class = "table table-striped">
    <thead>
        <tr>
            <th> Title</th>
            <th> Author </th>
            <th> Price </th>
            <th> Actions </th>
        </tr>
    </thead>
    <tbody>
        <tr *ngFor = "let book of books" >
            <td> {{ book.title }} </td>
            <td> {{ book.author }} </td>
            <td> {{ book.price }} </td>
            <td>
                <button (click) = "updateBook(book.bno)" class = "btn btn-info"> Update</button>
                <button (click) = "deleteBook(book.bno)" class = "btn btn-danger" style="margin-left: 10px"> Delete</button>
                <button (click) = "readBook(book.bno)" class = "btn btn-info" style="margin-left: 10px"> View</button>
            </td>
        </tr>
    </tbody>
</table>

book-create.ts

import { Component } from '@angular/core';
import { Book } from '../book';
import { BookService } from '../book-service';
import { Router } from '@angular/router';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-book-create',
  imports: [FormsModule],
  templateUrl: './book-create.html',
  styleUrl: './book-create.css'
})
export class BookCreate {
  book: Book = new Book();
  constructor(private bookService:BookService, private router:Router){
  }
  saveBook(){
    this.bookService.createBook(this.book).subscribe(data =>{
      this.router.navigate(['/books-read']);
    });
    
  }
  onSubmit(){
    this.saveBook();
  }
}


book-create.html

<div class="col-md-8 offset-md-3">
    <h3>Create Book</h3>
    <form (ngSubmit) = "onSubmit()">
        <div class="form-group">
            <label for="title">Title</label>
            <input type = "text" class="form-control" id="title" [(ngModel)] = "book.title" name="title">
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <input type = "text" class="form-control" id="author" [(ngModel)] = "book.author" name="author">
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input type = "text" class="form-control" id="price" [(ngModel)] = "book.price" name="price">
        </div>
        <button class="btn btn-success" type="submit">Submit</button>
    </form>
</div>

book-update.ts

import { Component, OnInit } from '@angular/core';
import { FormsModule } from '@angular/forms';
import { Book } from '../book';
import { BookService } from '../book-service';
import { ActivatedRoute, Router } from '@angular/router';

@Component({
  selector: 'app-book-update',
  imports: [FormsModule],
  templateUrl: './book-update.html',
  styleUrl: './book-update.css'
})
export class BookUpdate implements OnInit {
  bno!: number;
  book: Book = new Book();
  constructor(private bookService: BookService,
    private route: ActivatedRoute,
    private router: Router) { }
  ngOnInit(): void {
    this.route.queryParams.subscribe(params => {
      this.bno = params['bno'];
    });
    this.bookService.readBook(this.bno).subscribe(data => {
      this.book = data;
    });
  }
  onSubmit(){
    this.bookService.updateBook(this.bno, this.book).subscribe( data =>{
      this.goToBookList();
    }
    );
  }
  goToBookList(){
    this.router.navigate(['/books-read']);
  }
}

book-update.html 

<div class="col-md-6 offset-md-3">
    <h3> Update Book </h3>
    <form (ngSubmit) = "onSubmit()">
         <div class="form-group">
            <label for="title">Title</label>
            <input type="text" class ="form-control" id = "title"
                [(ngModel)] = "book.title" name = "title">
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <input type="text" class ="form-control" id = "author"
                [(ngModel)] = "book.author" name = "author">
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input type="text" class ="form-control" id = "price"
                [(ngModel)] = "book.price" name = "price">
        </div>
        <button class = "btn btn-success" type ="submit">Submit</button>
    </form>
</div>

book-read.ts

import { Component, OnInit } from '@angular/core';
import { Book } from '../book';
import { ActivatedRoute } from '@angular/router';
import { BookService } from '../book-service';

@Component({
  selector: 'app-book-read',
  imports: [],
  templateUrl: './book-read.html',
  styleUrl: './book-read.css'
})
export class BookRead implements OnInit {
  bno!: number;
  book!: Book;
  constructor(private route: ActivatedRoute, private bookService: BookService) { }
  ngOnInit(): void {

    this.route.queryParams.subscribe(params => {
      this.bno = params['bno'];
    });
    this.bookService.readBook(this.bno).subscribe(data => {
      this.book = data;
    });
  }
}

book-read.html

<h3> View Book Details</h3>
<div>
    <div>
        <label> <b> Title: </b></label> {{book.title}}
    </div>
    <div>
        <label> <b> Author: </b></label> {{book.author}}
    </div>
    <div>
        <label> <b> Price: </b></label> {{book.price}}
    </div>
</div>

book-home.html

<h1>Welcome to my Book Store</h1>
