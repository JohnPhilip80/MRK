Install Node.js
	https://nodejs.org/en
	Download Node.js (LTS)
	Node.js installation automatically install npm
	Open Command Prompt
		node -v
		npm -v
	
Install Angular CLI
	Command Line Interface used to create angular applications.
	Open Command Prompt
		npm install -g @angular/cli
		ng --version
		
Install VS Code
	https://code.visualstudio.com/download
	
Create new Folder d:/John/AngularProjects/AngularSpringBootCRUD

Open vscode from Command Prompt
	navigate to that folder.
	code .
	
Create new Angular App from vscode.
	Open Terminal
	ng new book-ui
	suppose any error 
		Set-ExecutionPolicy -Scope CurrentUser -ExecutionPolicy Unrestricted
	select css
	N for SSR (Server Side Rendering)

Run first Angular App
	Open Terminal
	cd book-ui
	ng serve
	Open Browser
	http://localhost:4200



Add Bootstrap in our anglar app.
	Bootstrap is css frame work used to develop responsive layouts in web applications.
	Open New Terminal
	go to your app folder
	npm install bootstrap --save
	https://getbootstrap.com/
		Include via CDN
		copy the link tag
	Open index.html
		paste it.

Test bootstrap successfully integrated
	open app.component.html
		<h1 class="text-center">{{title}}</h1>
	open browser and check the title is centered.

Our Application components
	AppComponent
	CreateBookComponent
	BookListComponent
	UpdateBookComponent
	BookDetailsComponent

	Router
	BookService
	HttpClient


go to your app folder (book-ui)
ng g class book
ng g c book-list 
ng g c create-book
ng g c update-book
ng g c book-details
ng g s book 

book.ts
	export class Book {
		bno!: number;
		title!: string;
		author!: string;
		price!: number;
	}

add bootstrap cdn in index.html
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.6/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4Q6Gf2aSP4eDXB8Miphtr37CMZZQ5oXLH2yaXMJ2w8e2ZtHTl7GptT4jmndRuHDT" crossorigin="anonymous"> 
	

styles.css
.footer{
    position: absolute;
    bottom:0;
    width:100%;
    height:40px;
    background-color: blue;
    text-align: center;
    color:white;
}

app.routes.ts

import { Routes } from '@angular/router';
import { BookListComponent } from './book-list/book-list.component';
import { CreateBookComponent } from './create-book/create-book.component';
import { UpdateBookComponent } from './update-book/update-book.component';
import { BookDetailsComponent } from './book-details/book-details.component';

export const routes: Routes = [
    {path: 'read-books', component: BookListComponent},
  {path: 'create-book', component: CreateBookComponent},
  {path: '', redirectTo: 'read-books', pathMatch: 'full'},
  {path: 'update-book', component: UpdateBookComponent},
  {path: 'book-details', component: BookDetailsComponent}
];

app.config.ts

import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';
import { provideHttpClient } from '@angular/common/http';
import { routes } from './app.routes';

export const appConfig: ApplicationConfig = {
  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes),provideHttpClient()]
};

app.component.ts 

import { Component } from '@angular/core';
import { RouterLink, RouterOutlet } from '@angular/router';
@Component({
  selector: 'app-root',
  imports: [RouterOutlet,RouterLink],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent {
  title = 'book-ui';
}

app.component.html

<nav class="navbar navbar-expand-sm bg-primary navbar-dark">
  <ul class="navbar-nav">
    <li class="nav-item">
      <a routerLink="read-books" routerLinkActive="active" class="nav-link">Read Books</a>
    </li>
    <li class="nav-item">
      <a routerLink="create-book" routerLinkActive="active" class="nav-link">Create Book</a>
    </li>
  </ul>
</nav>
<h1 class="text-center">{{title}}</h1>
<div class = "container">
<router-outlet></router-outlet>
</div>
<footer class = "footer">
  <div class="container">
    <span>All Rights Reserved 2025 John Philip</span>
  </div>
</footer>



book.service.ts

import { Injectable } from '@angular/core';
import { HttpClient, HttpParams } from '@angular/common/http'
import { Observable } from 'rxjs';
import { Book } from './book';

@Injectable({
  providedIn: 'root'
})
export class BookService {
  private baseURL = "http://localhost:8080/book/api/";
  constructor(private httpClient:HttpClient) { }
  
  readBooks(): Observable<Book[]>{
    return this.httpClient.get<Book[]>(this.baseURL+"readbooks?db=true");
  }
  
  createBook(book: Book): Observable<Object>{
    return this.httpClient.post(this.baseURL + "createbook?db=true", book,{responseType:'text'});
  }

  readBook(bno: number): Observable<Book>{
    let queryParams = new HttpParams();
    queryParams = queryParams.set('db','true');
    queryParams = queryParams.set('bno',bno);
    return this.httpClient.get<Book>(this.baseURL + "getbookbybno",{params:queryParams});
  }

  updateBook(bno: number, book: Book): Observable<Object>{
  const params = {
        db: 'true',
        bno: bno
      };
    return this.httpClient.put(this.baseURL + "updatebook", book , {responseType:'text', params});
  }
  deleteBook(bno: number): Observable<Object>{
    const params = {
        db: 'true',
        bno: bno
      };
    return this.httpClient.delete(this.baseURL + "deletebook", {responseType:'text', params});
  }
}

book-list.component.ts 

import { Component, OnInit } from '@angular/core';
import { Book } from '../book'
import { BookService } from '../book.service'
import { Router } from '@angular/router';
import { NgFor } from '@angular/common';

@Component({
  selector: 'app-book-list',
  imports: [NgFor],
  templateUrl: './book-list.component.html',
  styleUrl: './book-list.component.css'
})
export class BookListComponent implements OnInit {
  books!: Book[];
  constructor(private bookService: BookService,
    private router: Router) { }
  ngOnInit(): void {
    this.getBooks();
  }
  private getBooks(){
    this.bookService.readBooks().subscribe(data => {
      this.books = data;
    });
  }
  bookDetails(bno: number){
    this.router.navigate(['book-details'], {queryParams: { 'db': 'true', 'bno': bno } });
  }
  updateBook(bno: number){
    this.router.navigate(['update-book'], {queryParams: { 'db': 'true', 'bno': bno } });
  }
  deleteBook(bno: number){
    this.bookService.deleteBook(bno).subscribe( data => {
      console.log(data);
      this.getBooks();
    })
  }
}

book-list.component.html

<h2> Book List</h2>
<table class = "table table-striped">
    <thead>
        <tr>
            <th> Title</th>
            <th> Author </th>
            <th> Price </th>
            <th> Actions </th>
        </tr>
    </thead>
    <tbody>
        <tr *ngFor = "let book of books" >
            <td> {{ book.title }} </td>
            <td> {{ book.author }} </td>
            <td> {{ book.price }} </td>
            <td>
                <button (click) = "updateBook(book.bno)" class = "btn btn-info"> Update</button>
                <button (click) = "deleteBook(book.bno)" class = "btn btn-danger" style="margin-left: 10px"> Delete</button>
                <button (click) = "bookDetails(book.bno)" class = "btn btn-info" style="margin-left: 10px"> View</button>
            </td>
        </tr>
    </tbody>
</table>

create-book.component.ts

import { Component } from '@angular/core';
import { Book } from '../book';
import { FormsModule } from '@angular/forms';
import { BookService } from '../book.service';
import { Router } from '@angular/router';

@Component({
  selector: 'app-create-book',
  imports: [FormsModule],
  templateUrl: './create-book.component.html',
  styleUrl: './create-book.component.css'
})
export class CreateBookComponent {
  book: Book = new Book();
  constructor(private bookService:BookService, private router:Router){
  }
  saveBook(){
    this.bookService.createBook(this.book).subscribe(data =>{
      this.router.navigate(['/read-books']);
    });
    
  }
  onSubmit(){
    this.saveBook();
  }
}

create-book.component.html

<div class="col-md-8 offset-md-3">
    <h3>Create Book</h3>
    <form (ngSubmit) = "onSubmit()">
        <div class="form-group">
            <label for="title">Title</label>
            <input type = "text" class="form-control" id="title" [(ngModel)] = "book.title" name="title">
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <input type = "text" class="form-control" id="author" [(ngModel)] = "book.author" name="author">
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input type = "text" class="form-control" id="price" [(ngModel)] = "book.price" name="price">
        </div>
        <button class="btn btn-success" type="submit">Submit</button>
    </form>
</div>

update-book.component.ts

import { Component, OnInit } from '@angular/core';
import { BookService } from '../book.service';
import { Book } from '../book';
import { ActivatedRoute, Router } from '@angular/router';
import { FormsModule } from '@angular/forms';


@Component({
  selector: 'app-update-book',
  imports: [FormsModule],
  templateUrl: './update-book.component.html',
  styleUrl: './update-book.component.css'
})
export class UpdateBookComponent implements OnInit {
  bno!: number;
  book: Book = new Book();
  constructor(private bookService: BookService,
    private route: ActivatedRoute,
    private router: Router) { }
  ngOnInit(): void {
    this.route.queryParams.subscribe(params => {
      this.bno = params['bno'];
    });
    this.bookService.readBook(this.bno).subscribe(data => {
      this.book = data;
    });
  }
  onSubmit(){
    this.bookService.updateBook(this.bno, this.book).subscribe( data =>{
      this.goToBookList();
    }
    );
  }
  goToBookList(){
    this.router.navigate(['/read-books']);
  }
}

update-book.component.html 

<div class="col-md-6 offset-md-3">
    <h3> Update Book </h3>
    <form (ngSubmit) = "onSubmit()">
         <div class="form-group">
            <label for="title">Title</label>
            <input type="text" class ="form-control" id = "title"
                [(ngModel)] = "book.title" name = "title">
        </div>
        <div class="form-group">
            <label for="author">Author</label>
            <input type="text" class ="form-control" id = "author"
                [(ngModel)] = "book.author" name = "author">
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input type="text" class ="form-control" id = "price"
                [(ngModel)] = "book.price" name = "price">
        </div>
        <button class = "btn btn-success" type ="submit">Submit</button>
    </form>
</div>

book-details.component.ts

import { Component, OnInit } from '@angular/core';
import { Book } from '../book';
import { ActivatedRoute } from '@angular/router';
import { BookService } from '../book.service';

@Component({
  selector: 'app-book-details',
  templateUrl: './book-details.component.html',
  styleUrls: ['./book-details.component.css']
})
export class BookDetailsComponent implements OnInit {
  bno!: number;
  book!: Book;
  constructor(private route: ActivatedRoute, private bookService: BookService) { }
  ngOnInit(): void {

    this.route.queryParams.subscribe(params => {
      this.bno = params['bno'];
    });
    this.bookService.readBook(this.bno).subscribe(data => {
      this.book = data;
    });
  }
}

book-details.component.html

<h3> View Book Details</h3>
<div>
    <div>
        <label> <b> Title: </b></label> {{book.title}}
    </div>
    <div>
        <label> <b> Author: </b></label> {{book.author}}
    </div>
    <div>
        <label> <b> Price: </b></label> {{book.price}}
    </div>
</div>



package com.cca.philip.book.controllers;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.cca.philip.book.models.Book;
import com.cca.philip.book.services.BookService;

@RestController
@RequestMapping("/book/api")
public class BookRESTController {
	@Autowired
	private BookService service;
	
	@GetMapping("/getbookname")
	public String getBookName() {
		return service.getBookName();
	}
	/*@GetMapping("/readbooks")
	public List<Book> readBooks(){
		return service.readBooks();
	}*/
	@GetMapping("/readbooks")
	public List<Book> readBooks(@RequestParam boolean db) {
		return service.readBooks(db);
	}
	
	/*@PostMapping("/createbook")
	public String createBook(@RequestBody Book book) {
		service.createBook(book);
		return "Success";
	}*/
	@PostMapping("/createbook")
	public String createBook(@RequestParam boolean db, @RequestBody Book book) {
		service.createBook(book,db);
		return "Success";
	}
	
	/*@PutMapping("/updatebook")
	public String updateBook(@RequestBody Book book) {
		service.updateBook(book);
		return "Success";
	}*/
	@PutMapping("/updatebook")
	public String updateBook(@RequestParam boolean db, @RequestBody Book book) {
		service.updateBook(book,db);
		return "Success";
	}
	/*@DeleteMapping("deletebook")
	public String deleteBook(@RequestParam Long bno) {
		service.deleteBook(bno);
		return "Success";
	}*/
	@DeleteMapping("deletebook")
	public String deleteBook(@RequestParam boolean db, @RequestParam Long bno) {
		service.deleteBook(bno,db);
		return "Success";
	}
	
	/*@GetMapping("getbookbybno")
	public Book getBookByBno(@RequestParam Long bno) {
		return service.getBookByBno(bno);
	}*/
	
	@GetMapping("getbookbybno")
	public Book getBookByBno(@RequestParam boolean db, @RequestParam Long bno) {
		return service.getBookByBno(bno,db);
	}
}
